1/1/2010 
So far development is proceeding nicely. Jbox2d was a cinch to integrate, and using swing to prototype my game engine is far easier than dealing with the android debugger/emulator. I am still unsure as to if I will leave this as a line drawing game, or make it have sprites. I wonder which would be faster. I would imagine i would need opengl es to do it fast on android. I also don't want to be too much a copycat of d-zone, the insipiration for this game.

Right now I need to split up my project into packages, it is getting sufficiently complex. I need to build a weapons class hierarchy, and bolster the tanks so they have "weapon ports". Also, my game AI could be alot more interesting than the basic shuffle it does right now. Generally I think I will put off scoring management and purchasing of weapons until the end, instead focusing on each arena battle now, and constructing the players/ai in my game initialization. The game mechanics are also a bit wonky still. Physics is fun, but it will require alot of tuning to feel fun.

1/2/2010
Added hull/shields with a recharge rate. I need to put some visuals in there to see the hulls/shields/energy for the recharge. I also started a weapons framework, and made my initial weapon the "Tank Cannon". For now it draws some energy every time it shoots. An interesting thing would be to have the shields recharge from the energy, so once shields were all the way up, the energy would recharge faster.

Meanwhile, watching the movie "Avatar" and realizing how much James Cameron pulled from so many existing movies/novels/video games, I realized that maybe I shouldn't feel so bad. This game is right now heavily inspired by D-Zone, but Julian Cochran (www.digitalscores.com/dzone), and I feel compelled to make it significantly different because I hate such uninspired copycatting, but the more I think about it rationally, the more I notice how much of gaming is that formulaic. Interesting quandary.

1/9/2010
I have added predictive shooting to my simple Hunter AI. This suddenly makes the game interesting. The next step is to make the AI actually follow me, then maybe dodge. Also, I am going to start to need a HUD so i can keep tabs on health/power of all the various units. 

Ultimately, I am going to try to get this thing barebones playable in swing, then try to port it to android so I can feel confident in my full development platform. Then I can tighten up the game in the swing library, and periodically switch to android to make things pretty and tweak input.

1/10/2010
So now the challenge is that with prediction and aggressive maneuvering, my AI is a bit too good, given that I have no other weapons to fight it aside from my dull cannon. I added random obstacles, as this might give me some advantage, but this means I should also add some AI path finding, such as A*. On a broader note, this is starting to feel like a game, albeit without much variation or scoring.

One thing I keep running into is the high number of back-references I need to do. For instance, efficient event passing, or determination of who shot what at whom, and so on, requires references to and from the various game objects. Given java's garbage collection scheme, I think this means I am prone to alot of memory leaks. I will need to keep a close eye on this.

The next big challenges I want to overcome is to add multiple weapons and ports for weapons, add nicer obstacles, and start to think about how to detach the display code from the game code so that my porting to Android will be easier. All in all, though, this is a fun project. Another note, though, is that the tank movement still seems a bit clunky, as it is a hybrid of actual physics motions, and shoe-horned direct changes to constants like linear and angular velocity. This will require more tweaking.

1/15/2010
I have fully extracted the awt specific stuff from the game objects, and need only to figure out a simple way of managing specific render objects for each game object. My current strategy is to have each game object be a Renderable, and offer up a key. This key will be used to lookup the specific render object to be used (interpreted based upon which rendering system i use). The render object is then set against the game object, so every time i iterate through them, i can quickly extract the appropriate object to be rendering. As I write this, i am realizing that perhaps going the other way would be less chaotic, where my render objects would attach to game objects, and i jsut run through the render objects.

Either way, the challenge is to efficiently correlate a rendering to an object, and be able to swap these out pretty easily. Ultimately it would be nice to add layers, and nodes so i can have sub-object renderobjects (e.g. guns on tank sprites). 

The hope is to get this converted over, then get the polygon based rendering back up again, then patch this whole thing into an android project so i can get moving on an actual phone-playable prototype!

1/23/2010
I haven't been doing much lately. Refactoring the rendering kindof took some of my steam, as it set me back a bit. Finally got the sprites to render in the right spot. Since i set up simple tank looking sprites, now I am annoyed that these things don't move like a tank, so i am endeavouring to fix that.

I pulled the obstacles out for the time being. I also refactored the game player adding to outside of the game object, so i can add in game players to the game after it is initialized. This makes it a bit easier to manipulate from my external class.

All in all, a bit dismayed at my loss of momentum. I am realizing all the loose strings at the moment, and thinking maybe i picked a difficult first game. I might need to review what is left so i can at least figure out what is left to start play testing this thing.

1/27/2010
I finally took the evening to hack away and put this thing on android. All in all, I have to say the android port was really really easy. Partly because of my extraction of the rendering engine, and partly because of the really slick android APIs. Right now I have 6 AI players battling it out on my android debug app on my phone! This is cool because it is on my phone, but not cool because it is really hiccupy with only 6 players and a bunch of bullets flying around. The threading and rendering is pretty chinky at the moment ( i just loop and render/tick/render/tick), so I might be able to smooth things out there. I am also concerned about the possibilities of memory loss due to circular references, which I have found hard to avoid with all game objects flying around and knowing about other game objects. So far I have just utilized onDestroy type events, and am hoping i am being good about making that happen.

Next up would be to get some basic phone-based input handling in there so i can attempt to play on AI player on my phone. Then I have to return to the task of making the obstacles with the sprites, expanding the overall arsenal, and building in scoring logic (e.g. who killed who). Then there will be play testing, and options menus, and then finally fun stuff like the splash screen. Then, maybe i can get it on the market.

Generally, the end-of-Januauary deadline looks like it is going to slip. I partly lost momentum when i refactored my rendering engine, and partly just due to business at work and fatigue from coding this project at home. This android success night has given me a real surge, so hopefully I can have something rudimentarily playable by end of January that I can then distribute to some people with phones to get general impressions.

1/31/2010
So my hopeful timeline has come and passed. Today I worked on handling input into the android game. This is turning out to be more of a conundrum than I had anticipated. Specifically, I need to somehow intuitively drive the tank and shoot. I was thinking about on screen buttons, but lack of multitouch makes this a bit hokey. I thought about having gestures point the tank, and a touch to shoot, but differentiating gesture and touch is hard. A little internetting showed me that iCombat, a similar iphone based game, uses tilt to drive, and tapping to shoot. This lead me to refactor the player object a bit so i can in the future give it a target to aim at when shooting the weapon.

However, I feel a bit bad immediately copying all of iCombat's gameplay. Right now my first test will be to use a gesture "swipe" (fling) to drive the tank in a particular direction, and have clicking on the keys shoot (e.g. click the trackball or green call key). I might in the end have to go with the tilt, though.

All in all, this project does seem to keep getting more difficult. There are all sorts of angles I hadn't anticipated (or only meekly considered). Getting android going and tying into its api was actually way easier than i expected, and debugging is super easy. However, engineering the game and handling input has been a real challenge. The actual scoring parts of the game are non-existent, and game movement is primitive at best. The AI whoops me mostly because it can predict stuff, but outside of that it is as dumb as its 20 lines of code. Hopefully I can keep charging ahead and get this thing into some kind of reasonably fun playable shape in the next month, as i really do want to get this thing into the real world. The cool part is how much I am learning about the android api. With each dig, I keep finding cool stuff, and becoming more comfortable with its very elegant organization.
