1/1/2010 
So far development is proceeding nicely. Jbox2d was a cinch to integrate, and using swing to prototype my game engine is far easier than dealing with the android debugger/emulator. I am still unsure as to if I will leave this as a line drawing game, or make it have sprites. I wonder which would be faster. I would imagine i would need opengl es to do it fast on android. I also don't want to be too much a copycat of d-zone, the insipiration for this game.

Right now I need to split up my project into packages, it is getting sufficiently complex. I need to build a weapons class hierarchy, and bolster the tanks so they have "weapon ports". Also, my game AI could be alot more interesting than the basic shuffle it does right now. Generally I think I will put off scoring management and purchasing of weapons until the end, instead focusing on each arena battle now, and constructing the players/ai in my game initialization. The game mechanics are also a bit wonky still. Physics is fun, but it will require alot of tuning to feel fun.

1/2/2010
Added hull/shields with a recharge rate. I need to put some visuals in there to see the hulls/shields/energy for the recharge. I also started a weapons framework, and made my initial weapon the "Tank Cannon". For now it draws some energy every time it shoots. An interesting thing would be to have the shields recharge from the energy, so once shields were all the way up, the energy would recharge faster.

Meanwhile, watching the movie "Avatar" and realizing how much James Cameron pulled from so many existing movies/novels/video games, I realized that maybe I shouldn't feel so bad. This game is right now heavily inspired by D-Zone, but Julian Cochran (www.digitalscores.com/dzone), and I feel compelled to make it significantly different because I hate such uninspired copycatting, but the more I think about it rationally, the more I notice how much of gaming is that formulaic. Interesting quandary.

1/9/2010
I have added predictive shooting to my simple Hunter AI. This suddenly makes the game interesting. The next step is to make the AI actually follow me, then maybe dodge. Also, I am going to start to need a HUD so i can keep tabs on health/power of all the various units. 

Ultimately, I am going to try to get this thing barebones playable in swing, then try to port it to android so I can feel confident in my full development platform. Then I can tighten up the game in the swing library, and periodically switch to android to make things pretty and tweak input.

1/10/2010
So now the challenge is that with prediction and aggressive maneuvering, my AI is a bit too good, given that I have no other weapons to fight it aside from my dull cannon. I added random obstacles, as this might give me some advantage, but this means I should also add some AI path finding, such as A*. On a broader note, this is starting to feel like a game, albeit without much variation or scoring.

One thing I keep running into is the high number of back-references I need to do. For instance, efficient event passing, or determination of who shot what at whom, and so on, requires references to and from the various game objects. Given java's garbage collection scheme, I think this means I am prone to alot of memory leaks. I will need to keep a close eye on this.

The next big challenges I want to overcome is to add multiple weapons and ports for weapons, add nicer obstacles, and start to think about how to detach the display code from the game code so that my porting to Android will be easier. All in all, though, this is a fun project. Another note, though, is that the tank movement still seems a bit clunky, as it is a hybrid of actual physics motions, and shoe-horned direct changes to constants like linear and angular velocity. This will require more tweaking.

1/15/2009
I have fully extracted the awt specific stuff from the game objects, and need only to figure out a simple way of managing specific render objects for each game object. My current strategy is to have each game object be a Renderable, and offer up a key. This key will be used to lookup the specific render object to be used (interpreted based upon which rendering system i use). The render object is then set against the game object, so every time i iterate through them, i can quickly extract the appropriate object to be rendering. As I write this, i am realizing that perhaps going the other way would be less chaotic, where my render objects would attach to game objects, and i jsut run through the render objects.

Either way, the challenge is to efficiently correlate a rendering to an object, and be able to swap these out pretty easily. Ultimately it would be nice to add layers, and nodes so i can have sub-object renderobjects (e.g. guns on tank sprites). 

The hope is to get this converted over, then get the polygon based rendering back up again, then patch this whole thing into an android project so i can get moving on an actual phone-playable prototype!
